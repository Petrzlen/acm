#ifndef BLOB_SEARCH_TEST_H
#define BLOB_SEARCH_TEST_H

#include <vector>
#include <string>

std::vector<std::vector<bool>> StringToBoard(
    const std::vector<std::string>& strs) {
  std::vector<std::vector<bool>> board(strs.size(), std::vector<bool>());
  for (int i = 0; i < strs.size(); ++i) {
    for (char c : strs[i]) {
      board[i].push_back(c == '1');
    }
  }
  return board;
}

// TODO move it into a .dat file
std::vector<std::vector<std::string>> TEST_BOARDS = {
// Sample from problem statement.
  {"0000000000",
   "0011100000",
   "0011111000",
   "0010001000",
   "0011111000",
   "0000101000",
   "0000101000",
   "0000111000",
   "0000000000",
   "0000000000"},
// Edge cases.
  {"0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000100000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000"},
  {"1000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000"},
  {"0000000001",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000"},
  {"0000000000",
   "0000000000",
   "0000000000",
   "0000000001",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000",
   "0000000000"},
  {"0000000000",
   "0000000000",
   "0000010000",
   "0000010000",
   "0000010000",
   "0011111100",
   "0000010000",
   "0000010000",
   "0000000000",
   "0000000000"},
  {"1111111111",
   "1000000001",
   "1000000001",
   "1000000001",
   "1000000001",
   "1000000001",
   "1000000001",
   "1000000001",
   "1000000001",
   "1111111111"},
// With "teeth"
  {"0000000000",
   "0111010100",
   "0001111100",
   "0110010000",
   "0010010000",
   "0011111100",
   "0010010000",
   "0110010110",
   "0000111100",
   "0000000000"},
// Snake like
  {"0000000000",
   "0011100010",
   "0010101110",
   "0000101000",
   "0111101110",
   "0010000010",
   "0010001110",
   "0011101000",
   "0010101000",
   "0000111000"}
};

#endif
